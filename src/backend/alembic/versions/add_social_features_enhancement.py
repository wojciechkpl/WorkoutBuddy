"""Add enhanced social features for customer journey

Revision ID: social_features_enhancement
Revises: ad0bc1dd4027
Create Date: 2024-01-20 10:00:00.000000

"""

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "social_features_enhancement"
down_revision = "ad0bc1dd4027"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Enhanced users table for account types
    op.add_column(
        "users",
        sa.Column(
            "account_type", sa.String(20), nullable=False, server_default="public"
        ),
    )
    op.add_column(
        "users",
        sa.Column(
            "discoverability_level", sa.String(20), nullable=False, server_default="all"
        ),
    )
    op.add_column(
        "users", sa.Column("social_comfort_level", sa.String(20), nullable=True)
    )
    op.add_column(
        "users",
        sa.Column("preferred_communication_style", sa.String(20), nullable=True),
    )
    op.add_column(
        "users",
        sa.Column(
            "location_sharing_enabled",
            sa.Boolean(),
            nullable=False,
            server_default="false",
        ),
    )
    op.add_column("users", sa.Column("latitude", sa.Float(), nullable=True))
    op.add_column("users", sa.Column("longitude", sa.Float(), nullable=True))

    # Enhanced community_groups table
    op.add_column(
        "community_groups", sa.Column("category", sa.String(50), nullable=True)
    )
    op.add_column(
        "community_groups",
        sa.Column(
            "privacy_level", sa.String(20), nullable=False, server_default="public"
        ),
    )
    op.add_column(
        "community_groups", sa.Column("max_members", sa.Integer(), nullable=True)
    )
    op.add_column(
        "community_groups",
        sa.Column("is_official", sa.Boolean(), nullable=False, server_default="false"),
    )
    op.add_column(
        "community_groups", sa.Column("created_by", sa.Integer(), nullable=True)
    )
    op.add_column(
        "community_groups", sa.Column("activity_level", sa.String(20), nullable=True)
    )
    op.add_column(
        "community_groups",
        sa.Column("member_count", sa.Integer(), nullable=False, server_default="0"),
    )
    op.add_column(
        "community_groups",
        sa.Column(
            "challenge_active", sa.Boolean(), nullable=False, server_default="false"
        ),
    )

    # Community roles table
    op.create_table(
        "community_roles",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("community_id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("role_type", sa.String(20), nullable=False),
        sa.Column(
            "permissions", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("assigned_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["community_id"],
            ["community_groups.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_community_roles_id"), "community_roles", ["id"], unique=False
    )

    # Enhanced challenges table
    op.add_column(
        "challenges", sa.Column("difficulty_level", sa.String(20), nullable=True)
    )
    op.add_column(
        "challenges",
        sa.Column("success_rate", sa.Numeric(precision=5, scale=2), nullable=True),
    )
    op.add_column(
        "challenges",
        sa.Column(
            "target_audience", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
    )
    op.add_column("challenges", sa.Column("community_id", sa.Integer(), nullable=True))
    op.add_column(
        "challenges", sa.Column("challenge_type", sa.String(20), nullable=True)
    )
    op.add_column(
        "challenges", sa.Column("participant_limit", sa.Integer(), nullable=True)
    )
    op.add_column(
        "challenges",
        sa.Column(
            "current_participants", sa.Integer(), nullable=False, server_default="0"
        ),
    )

    # Challenge participants table
    op.create_table(
        "challenge_participants",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("challenge_id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("status", sa.String(20), nullable=False, server_default="active"),
        sa.Column(
            "progress_percentage",
            sa.Numeric(precision=5, scale=2),
            nullable=False,
            server_default="0",
        ),
        sa.Column("started_at", sa.DateTime(), nullable=True),
        sa.Column("completed_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["challenge_id"],
            ["challenges.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_challenge_participants_id"),
        "challenge_participants",
        ["id"],
        unique=False,
    )

    # Friend invitations table
    op.create_table(
        "friend_invitations",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("inviter_id", sa.Integer(), nullable=False),
        sa.Column("invitee_email", sa.String(255), nullable=False),
        sa.Column("invitee_phone", sa.String(20), nullable=True),
        sa.Column(
            "invitation_type", sa.String(20), nullable=False
        ),  # email, sms, qr_code, social
        sa.Column("invitation_code", sa.String(100), nullable=False),
        sa.Column("personalized_message", sa.Text(), nullable=True),
        sa.Column(
            "status", sa.String(20), nullable=False, server_default="pending"
        ),  # pending, accepted, expired
        sa.Column("accepted_user_id", sa.Integer(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("expires_at", sa.DateTime(), nullable=True),
        sa.Column("accepted_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["inviter_id"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(
            ["accepted_user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_friend_invitations_id"), "friend_invitations", ["id"], unique=False
    )
    op.create_index(
        op.f("ix_friend_invitations_code"),
        "friend_invitations",
        ["invitation_code"],
        unique=True,
    )

    # Privacy controls table
    op.create_table(
        "privacy_controls",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column(
            "control_type", sa.String(50), nullable=False
        ),  # profile_visibility, workout_sharing, location_sharing
        sa.Column(
            "target_group", sa.String(50), nullable=False
        ),  # friends, community, public, specific_users
        sa.Column("is_enabled", sa.Boolean(), nullable=False, server_default="true"),
        sa.Column(
            "specific_user_ids", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_privacy_controls_id"), "privacy_controls", ["id"], unique=False
    )

    # Content reports table
    op.create_table(
        "content_reports",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("reporter_id", sa.Integer(), nullable=False),
        sa.Column(
            "reported_content_type", sa.String(20), nullable=False
        ),  # post, message, profile, challenge
        sa.Column("reported_content_id", sa.Integer(), nullable=False),
        sa.Column("report_reason", sa.String(100), nullable=False),
        sa.Column("report_details", sa.Text(), nullable=True),
        sa.Column("status", sa.String(20), nullable=False, server_default="pending"),
        sa.Column("ai_analysis_score", sa.Numeric(precision=3, scale=2), nullable=True),
        sa.Column("reviewed_by", sa.Integer(), nullable=True),
        sa.Column("reviewed_at", sa.DateTime(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["reporter_id"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(
            ["reviewed_by"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_content_reports_id"), "content_reports", ["id"], unique=False
    )

    # Enhanced user_blocks table
    op.add_column(
        "user_blocks", sa.Column("block_reason", sa.String(100), nullable=True)
    )
    op.add_column(
        "user_blocks",
        sa.Column("block_type", sa.String(20), nullable=False, server_default="user"),
    )

    # Accountability partnerships table
    op.create_table(
        "accountability_partnerships",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("partner_id", sa.Integer(), nullable=False),
        sa.Column(
            "partnership_type", sa.String(20), nullable=False
        ),  # workout_partner, progress_checker, goal_supporter
        sa.Column("status", sa.String(20), nullable=False, server_default="active"),
        sa.Column(
            "goal_compatibility_score", sa.Numeric(precision=3, scale=2), nullable=True
        ),
        sa.Column(
            "schedule_compatibility_score",
            sa.Numeric(precision=3, scale=2),
            nullable=True,
        ),
        sa.Column(
            "personality_compatibility_score",
            sa.Numeric(precision=3, scale=2),
            nullable=True,
        ),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(
            ["partner_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_accountability_partnerships_id"),
        "accountability_partnerships",
        ["id"],
        unique=False,
    )

    # Enhanced accountability_checkins table
    op.add_column(
        "accountability_checkins",
        sa.Column("partnership_id", sa.Integer(), nullable=True),
    )
    op.add_column(
        "accountability_checkins",
        sa.Column("checkin_type", sa.String(20), nullable=True),
    )
    op.add_column(
        "accountability_checkins",
        sa.Column(
            "shared_with_partner", sa.Boolean(), nullable=False, server_default="true"
        ),
    )
    op.add_column(
        "accountability_checkins",
        sa.Column("partner_response", sa.Text(), nullable=True),
    )
    op.add_column(
        "accountability_checkins",
        sa.Column("response_at", sa.DateTime(), nullable=True),
    )

    # User subscriptions table for premium features
    op.create_table(
        "user_subscriptions",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column(
            "subscription_type", sa.String(20), nullable=False
        ),  # basic, premium, premium_safety
        sa.Column("status", sa.String(20), nullable=False, server_default="active"),
        sa.Column("features", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("started_at", sa.DateTime(), nullable=True),
        sa.Column("expires_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_user_subscriptions_id"), "user_subscriptions", ["id"], unique=False
    )

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Remove user_subscriptions table
    op.drop_index(op.f("ix_user_subscriptions_id"), table_name="user_subscriptions")
    op.drop_table("user_subscriptions")

    # Remove accountability partnerships table
    op.drop_index(
        op.f("ix_accountability_partnerships_id"),
        table_name="accountability_partnerships",
    )
    op.drop_table("accountability_partnerships")

    # Remove content_reports table
    op.drop_index(op.f("ix_content_reports_id"), table_name="content_reports")
    op.drop_table("content_reports")

    # Remove privacy_controls table
    op.drop_index(op.f("ix_privacy_controls_id"), table_name="privacy_controls")
    op.drop_table("privacy_controls")

    # Remove friend_invitations table
    op.drop_index(op.f("ix_friend_invitations_code"), table_name="friend_invitations")
    op.drop_index(op.f("ix_friend_invitations_id"), table_name="friend_invitations")
    op.drop_table("friend_invitations")

    # Remove challenge_participants table
    op.drop_index(
        op.f("ix_challenge_participants_id"), table_name="challenge_participants"
    )
    op.drop_table("challenge_participants")

    # Remove community_roles table
    op.drop_index(op.f("ix_community_roles_id"), table_name="community_roles")
    op.drop_table("community_roles")

    # Remove enhanced columns from challenges
    op.drop_column("challenges", "current_participants")
    op.drop_column("challenges", "participant_limit")
    op.drop_column("challenges", "challenge_type")
    op.drop_column("challenges", "community_id")
    op.drop_column("challenges", "target_audience")
    op.drop_column("challenges", "success_rate")
    op.drop_column("challenges", "difficulty_level")

    # Remove enhanced columns from community_groups
    op.drop_column("community_groups", "challenge_active")
    op.drop_column("community_groups", "member_count")
    op.drop_column("community_groups", "activity_level")
    op.drop_column("community_groups", "created_by")
    op.drop_column("community_groups", "is_official")
    op.drop_column("community_groups", "max_members")
    op.drop_column("community_groups", "privacy_level")
    op.drop_column("community_groups", "category")

    # Remove enhanced columns from users
    op.drop_column("users", "longitude")
    op.drop_column("users", "latitude")
    op.drop_column("users", "location_sharing_enabled")
    op.drop_column("users", "preferred_communication_style")
    op.drop_column("users", "social_comfort_level")
    op.drop_column("users", "discoverability_level")
    op.drop_column("users", "account_type")

    # Remove enhanced columns from user_blocks
    op.drop_column("user_blocks", "block_type")
    op.drop_column("user_blocks", "block_reason")

    # Remove enhanced columns from accountability_checkins
    op.drop_column("accountability_checkins", "response_at")
    op.drop_column("accountability_checkins", "partner_response")
    op.drop_column("accountability_checkins", "shared_with_partner")
    op.drop_column("accountability_checkins", "checkin_type")
    op.drop_column("accountability_checkins", "partnership_id")

    # ### end Alembic commands ###
