"""add missing exercise columns

Revision ID: 713f5af58064
Revises: d801a7adea45
Create Date: 2025-06-30 03:21:53.654738

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "713f5af58064"
down_revision: Union[str, None] = "d801a7adea45"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "accountability_checkins",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("date", sa.DateTime(), nullable=True),
        sa.Column("note", sa.Text(), nullable=True),
        sa.Column("completed", sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_accountability_checkins_id"),
        "accountability_checkins",
        ["id"],
        unique=False,
    )
    op.create_table(
        "challenges",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("title", sa.String(length=100), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column(
            "challenge_type",
            sa.Enum("WORKOUT", "NUTRITION", "SOCIAL", "CUSTOM", name="challengetype"),
            nullable=False,
        ),
        sa.Column("target_value", sa.Float(), nullable=False),
        sa.Column("target_unit", sa.String(length=20), nullable=False),
        sa.Column("start_date", sa.DateTime(), nullable=False),
        sa.Column("end_date", sa.DateTime(), nullable=False),
        sa.Column("reward_points", sa.Integer(), nullable=True),
        sa.Column("is_public", sa.Boolean(), nullable=True),
        sa.Column(
            "status",
            sa.Enum(
                "ACTIVE", "COMPLETED", "FAILED", "CANCELLED", name="challengestatus"
            ),
            nullable=True,
        ),
        sa.Column("created_by", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["created_by"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_challenges_id"), "challenges", ["id"], unique=False)
    op.create_table(
        "community_groups",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("category", sa.String(), nullable=True),
        sa.Column("privacy_level", sa.String(), nullable=True),
        sa.Column("created_by", sa.Integer(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["created_by"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_community_groups_id"), "community_groups", ["id"], unique=False
    )
    op.create_table(
        "friend_invitations",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("inviter_id", sa.Integer(), nullable=False),
        sa.Column("invitee_email", sa.String(), nullable=True),
        sa.Column("invitee_phone", sa.String(), nullable=True),
        sa.Column("invitation_code", sa.String(), nullable=False),
        sa.Column("invitation_type", sa.String(), nullable=False),
        sa.Column("personalized_message", sa.Text(), nullable=True),
        sa.Column("status", sa.String(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("accepted_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["inviter_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("invitation_code"),
    )
    op.create_index(
        op.f("ix_friend_invitations_id"), "friend_invitations", ["id"], unique=False
    )
    op.create_table(
        "friendships",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("friend_id", sa.Integer(), nullable=False),
        sa.Column("is_accepted", sa.Boolean(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("accepted_at", sa.DateTime(), nullable=True),
        sa.Column("status", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["friend_id"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("user_id", "friend_id", name="_user_friend_uc"),
    )
    op.create_index(op.f("ix_friendships_id"), "friendships", ["id"], unique=False)
    op.create_table(
        "privacy_settings",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("show_profile", sa.Boolean(), nullable=True),
        sa.Column("show_workouts", sa.Boolean(), nullable=True),
        sa.Column("show_stats", sa.Boolean(), nullable=True),
        sa.Column("allow_friend_requests", sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("user_id"),
    )
    op.create_index(
        op.f("ix_privacy_settings_id"), "privacy_settings", ["id"], unique=False
    )
    op.create_table(
        "recommendation_feedback",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("recommendation_id", sa.String(), nullable=False),
        sa.Column("feedback", sa.Text(), nullable=True),
        sa.Column("rating", sa.Float(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_recommendation_feedback_id"),
        "recommendation_feedback",
        ["id"],
        unique=False,
    )
    op.create_table(
        "user_blocks",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("blocker_id", sa.Integer(), nullable=False),
        sa.Column("blocked_id", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["blocked_id"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(
            ["blocker_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_user_blocks_id"), "user_blocks", ["id"], unique=False)
    op.create_table(
        "user_reports",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("reporter_id", sa.Integer(), nullable=False),
        sa.Column("reported_id", sa.Integer(), nullable=False),
        sa.Column(
            "reason",
            sa.Enum("SPAM", "ABUSE", "HARASSMENT", "OTHER", name="reportreasonenum"),
            nullable=False,
        ),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("resolved", sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(
            ["reported_id"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(
            ["reporter_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_user_reports_id"), "user_reports", ["id"], unique=False)
    op.create_table(
        "user_stats",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("date", sa.DateTime(), nullable=True),
        sa.Column("weight", sa.Float(), nullable=True),
        sa.Column("body_fat_percentage", sa.Float(), nullable=True),
        sa.Column("muscle_mass", sa.Float(), nullable=True),
        sa.Column("total_workouts", sa.Integer(), nullable=True),
        sa.Column("total_weight_lifted", sa.Float(), nullable=True),
        sa.Column("total_cardio_distance", sa.Float(), nullable=True),
        sa.Column("total_calories_burned", sa.Float(), nullable=True),
        sa.Column(
            "weight_unit", sa.Enum("KG", "LBS", name="weightunit"), nullable=True
        ),
        sa.Column(
            "distance_unit",
            sa.Enum("KM", "MILES", "METERS", name="distanceunit"),
            nullable=True,
        ),
        sa.Column("personal_records", sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_user_stats_date"), "user_stats", ["date"], unique=False)
    op.create_index(op.f("ix_user_stats_id"), "user_stats", ["id"], unique=False)
    op.create_table(
        "community_memberships",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("group_id", sa.Integer(), nullable=False),
        sa.Column("joined_at", sa.DateTime(), nullable=True),
        sa.Column("is_admin", sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(
            ["group_id"],
            ["community_groups.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_community_memberships_id"),
        "community_memberships",
        ["id"],
        unique=False,
    )
    op.drop_index("idx_exercise_logs_workout_log_id", table_name="exercise_logs")
    op.drop_table("exercise_logs")
    op.drop_index("idx_workout_logs_user_id", table_name="workout_logs")
    op.drop_table("workout_logs")
    op.drop_index("idx_user_followers_follower_id", table_name="user_followers")
    op.drop_index("idx_user_followers_following_id", table_name="user_followers")
    op.drop_table("user_followers")
    op.drop_table("workout_shares")
    op.add_column(
        "exercises",
        sa.Column(
            "primary_muscle",
            sa.Enum(
                "CHEST",
                "BACK",
                "SHOULDERS",
                "BICEPS",
                "TRICEPS",
                "LEGS",
                "GLUTES",
                "CORE",
                "CARDIO",
                "FULL_BODY",
                name="musclegroup",
            ),
            nullable=False,
        ),
    )
    op.add_column(
        "exercises", sa.Column("secondary_muscles", sa.String(), nullable=True)
    )
    op.add_column(
        "exercises",
        sa.Column(
            "exercise_type",
            sa.Enum(
                "STRENGTH",
                "CARDIO",
                "FLEXIBILITY",
                "BALANCE",
                "PLYOMETRIC",
                name="exercisetype",
            ),
            nullable=False,
        ),
    )
    op.add_column("exercises", sa.Column("difficulty", sa.Integer(), nullable=True))
    op.add_column("exercises", sa.Column("tips", sa.Text(), nullable=True))
    op.add_column("exercises", sa.Column("video_url", sa.String(), nullable=True))
    op.add_column(
        "exercises", sa.Column("is_distance_based", sa.Boolean(), nullable=True)
    )
    op.add_column("exercises", sa.Column("is_time_based", sa.Boolean(), nullable=True))
    op.add_column("exercises", sa.Column("mets", sa.Float(), nullable=True))
    op.alter_column(
        "exercises",
        "equipment",
        existing_type=sa.VARCHAR(length=50),
        type_=sa.Enum(
            "NONE",
            "BARBELL",
            "DUMBBELL",
            "KETTLEBELL",
            "MACHINE",
            "CABLE",
            "BANDS",
            "BODYWEIGHT",
            "CARDIO_MACHINE",
            "OTHER",
            name="equipment",
        ),
        nullable=False,
    )
    op.create_index(
        op.f("ix_exercises_equipment"), "exercises", ["equipment"], unique=False
    )
    op.create_index(op.f("ix_exercises_id"), "exercises", ["id"], unique=False)
    op.create_index(op.f("ix_exercises_name"), "exercises", ["name"], unique=True)
    op.create_index(
        op.f("ix_exercises_primary_muscle"),
        "exercises",
        ["primary_muscle"],
        unique=False,
    )
    op.drop_column("exercises", "difficulty_level")
    op.drop_column("exercises", "muscle_group")
    op.drop_column("exercises", "image_url")
    op.drop_column("exercises", "created_at")
    op.add_column("user_goals", sa.Column("is_achieved", sa.Boolean(), nullable=True))
    op.add_column("user_goals", sa.Column("achieved_at", sa.DateTime(), nullable=True))
    op.alter_column("user_goals", "user_id", existing_type=sa.INTEGER(), nullable=False)
    op.alter_column(
        "user_goals",
        "target_value",
        existing_type=sa.NUMERIC(precision=10, scale=2),
        type_=sa.Float(),
        nullable=False,
    )
    op.alter_column(
        "user_goals",
        "current_value",
        existing_type=sa.NUMERIC(precision=10, scale=2),
        type_=sa.Float(),
        existing_nullable=True,
        existing_server_default=sa.text("0"),
    )
    op.alter_column(
        "user_goals",
        "target_date",
        existing_type=sa.DATE(),
        type_=sa.DateTime(),
        existing_nullable=True,
    )
    op.drop_index("idx_user_goals_user_id", table_name="user_goals")
    op.create_index(op.f("ix_user_goals_id"), "user_goals", ["id"], unique=False)
    op.drop_constraint("user_goals_user_id_fkey", "user_goals", type_="foreignkey")
    op.create_foreign_key(None, "user_goals", "users", ["user_id"], ["id"])
    op.drop_column("user_goals", "updated_at")
    op.drop_column("user_goals", "status")
    op.alter_column(
        "users",
        "height",
        existing_type=sa.NUMERIC(precision=5, scale=2),
        type_=sa.Float(),
        existing_nullable=True,
    )
    op.alter_column(
        "users",
        "weight",
        existing_type=sa.NUMERIC(precision=5, scale=2),
        type_=sa.Float(),
        existing_nullable=True,
    )
    op.alter_column(
        "users",
        "fitness_goal",
        existing_type=sa.VARCHAR(length=50),
        type_=sa.Enum(
            "WEIGHT_LOSS",
            "MUSCLE_GAIN",
            "STRENGTH",
            "ENDURANCE",
            "GENERAL_FITNESS",
            "ATHLETIC_PERFORMANCE",
            name="fitnessgoal",
        ),
        existing_nullable=True,
    )
    op.alter_column(
        "users",
        "experience_level",
        existing_type=sa.VARCHAR(length=20),
        type_=sa.Enum(
            "BEGINNER", "INTERMEDIATE", "ADVANCED", "EXPERT", name="experiencelevel"
        ),
        existing_nullable=True,
    )
    op.alter_column(
        "users",
        "unit_system",
        existing_type=sa.VARCHAR(length=20),
        type_=sa.Enum("METRIC", "IMPERIAL", name="unitsystem"),
        existing_nullable=True,
        existing_server_default=sa.text("'METRIC'::character varying"),
    )
    op.alter_column(
        "users",
        "height_unit",
        existing_type=sa.VARCHAR(length=20),
        type_=sa.Enum("CM", "INCHES", "FEET_INCHES", name="heightunit"),
        existing_nullable=True,
        existing_server_default=sa.text("'CM'::character varying"),
    )
    op.alter_column(
        "users",
        "weight_unit",
        existing_type=sa.VARCHAR(length=20),
        type_=sa.Enum("KG", "LBS", name="weightunit"),
        existing_nullable=True,
        existing_server_default=sa.text("'KG'::character varying"),
    )
    op.drop_index("idx_users_email", table_name="users")
    op.drop_index("idx_users_username", table_name="users")
    op.drop_constraint("users_email_key", "users", type_="unique")
    op.drop_constraint("users_username_key", "users", type_="unique")
    op.create_index(op.f("ix_users_email"), "users", ["email"], unique=True)
    op.create_index(op.f("ix_users_id"), "users", ["id"], unique=False)
    op.create_index(op.f("ix_users_username"), "users", ["username"], unique=True)
    op.add_column("workout_exercises", sa.Column("order", sa.Integer(), nullable=False))
    op.add_column("workout_exercises", sa.Column("weight", sa.String(), nullable=True))
    op.add_column(
        "workout_exercises", sa.Column("duration", sa.Integer(), nullable=True)
    )
    op.add_column("workout_exercises", sa.Column("distance", sa.Float(), nullable=True))
    op.add_column("workout_exercises", sa.Column("speed", sa.Float(), nullable=True))
    op.add_column("workout_exercises", sa.Column("incline", sa.Float(), nullable=True))
    op.add_column(
        "workout_exercises", sa.Column("rest_time", sa.Integer(), nullable=True)
    )
    op.add_column(
        "workout_exercises", sa.Column("actual_reps", sa.String(), nullable=True)
    )
    op.add_column(
        "workout_exercises", sa.Column("actual_weight", sa.String(), nullable=True)
    )
    op.add_column("workout_exercises", sa.Column("notes", sa.Text(), nullable=True))
    op.add_column(
        "workout_exercises",
        sa.Column(
            "weight_unit", sa.Enum("KG", "LBS", name="weightunit"), nullable=True
        ),
    )
    op.add_column(
        "workout_exercises",
        sa.Column(
            "distance_unit",
            sa.Enum("KM", "MILES", "METERS", name="distanceunit"),
            nullable=True,
        ),
    )
    op.alter_column(
        "workout_exercises", "workout_id", existing_type=sa.INTEGER(), nullable=False
    )
    op.alter_column(
        "workout_exercises", "exercise_id", existing_type=sa.INTEGER(), nullable=False
    )
    op.alter_column(
        "workout_exercises",
        "reps",
        existing_type=sa.INTEGER(),
        type_=sa.String(),
        existing_nullable=True,
    )
    op.drop_index("idx_workout_exercises_workout_id", table_name="workout_exercises")
    op.create_index(
        op.f("ix_workout_exercises_id"), "workout_exercises", ["id"], unique=False
    )
    op.drop_constraint(
        "workout_exercises_workout_id_fkey", "workout_exercises", type_="foreignkey"
    )
    op.drop_constraint(
        "workout_exercises_exercise_id_fkey", "workout_exercises", type_="foreignkey"
    )
    op.create_foreign_key(None, "workout_exercises", "workouts", ["workout_id"], ["id"])
    op.create_foreign_key(
        None, "workout_exercises", "exercises", ["exercise_id"], ["id"]
    )
    op.drop_column("workout_exercises", "weight_kg")
    op.drop_column("workout_exercises", "rest_seconds")
    op.drop_column("workout_exercises", "duration_seconds")
    op.drop_column("workout_exercises", "created_at")
    op.drop_column("workout_exercises", "order_index")
    op.add_column(
        "workouts", sa.Column("scheduled_date", sa.DateTime(), nullable=False)
    )
    op.add_column("workouts", sa.Column("started_at", sa.DateTime(), nullable=True))
    op.add_column("workouts", sa.Column("completed_at", sa.DateTime(), nullable=True))
    op.add_column(
        "workouts",
        sa.Column(
            "status",
            sa.Enum(
                "PLANNED", "IN_PROGRESS", "COMPLETED", "SKIPPED", name="workoutstatus"
            ),
            nullable=True,
        ),
    )
    op.add_column("workouts", sa.Column("total_duration", sa.Integer(), nullable=True))
    op.add_column("workouts", sa.Column("calories_burned", sa.Float(), nullable=True))
    op.add_column("workouts", sa.Column("total_volume", sa.Float(), nullable=True))
    op.add_column("workouts", sa.Column("total_distance", sa.Float(), nullable=True))
    op.add_column("workouts", sa.Column("notes", sa.Text(), nullable=True))
    op.add_column("workouts", sa.Column("updated_at", sa.DateTime(), nullable=True))
    op.alter_column("workouts", "user_id", existing_type=sa.INTEGER(), nullable=False)
    op.drop_index("idx_workouts_user_id", table_name="workouts")
    op.create_index(op.f("ix_workouts_id"), "workouts", ["id"], unique=False)
    op.create_index(
        op.f("ix_workouts_scheduled_date"), "workouts", ["scheduled_date"], unique=False
    )
    op.drop_constraint("workouts_user_id_fkey", "workouts", type_="foreignkey")
    op.create_foreign_key(None, "workouts", "users", ["user_id"], ["id"])
    op.drop_column("workouts", "duration_minutes")
    op.drop_column("workouts", "workout_type")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "workouts",
        sa.Column(
            "workout_type", sa.VARCHAR(length=50), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "workouts",
        sa.Column("duration_minutes", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.drop_constraint(None, "workouts", type_="foreignkey")
    op.create_foreign_key(
        "workouts_user_id_fkey",
        "workouts",
        "users",
        ["user_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.drop_index(op.f("ix_workouts_scheduled_date"), table_name="workouts")
    op.drop_index(op.f("ix_workouts_id"), table_name="workouts")
    op.create_index("idx_workouts_user_id", "workouts", ["user_id"], unique=False)
    op.alter_column("workouts", "user_id", existing_type=sa.INTEGER(), nullable=True)
    op.drop_column("workouts", "updated_at")
    op.drop_column("workouts", "notes")
    op.drop_column("workouts", "total_distance")
    op.drop_column("workouts", "total_volume")
    op.drop_column("workouts", "calories_burned")
    op.drop_column("workouts", "total_duration")
    op.drop_column("workouts", "status")
    op.drop_column("workouts", "completed_at")
    op.drop_column("workouts", "started_at")
    op.drop_column("workouts", "scheduled_date")
    op.add_column(
        "workout_exercises",
        sa.Column("order_index", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "workout_exercises",
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "workout_exercises",
        sa.Column("duration_seconds", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "workout_exercises",
        sa.Column("rest_seconds", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "workout_exercises",
        sa.Column(
            "weight_kg",
            sa.NUMERIC(precision=5, scale=2),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.drop_constraint(None, "workout_exercises", type_="foreignkey")
    op.drop_constraint(None, "workout_exercises", type_="foreignkey")
    op.create_foreign_key(
        "workout_exercises_exercise_id_fkey",
        "workout_exercises",
        "exercises",
        ["exercise_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        "workout_exercises_workout_id_fkey",
        "workout_exercises",
        "workouts",
        ["workout_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.drop_index(op.f("ix_workout_exercises_id"), table_name="workout_exercises")
    op.create_index(
        "idx_workout_exercises_workout_id",
        "workout_exercises",
        ["workout_id"],
        unique=False,
    )
    op.alter_column(
        "workout_exercises",
        "reps",
        existing_type=sa.String(),
        type_=sa.INTEGER(),
        existing_nullable=True,
    )
    op.alter_column(
        "workout_exercises", "exercise_id", existing_type=sa.INTEGER(), nullable=True
    )
    op.alter_column(
        "workout_exercises", "workout_id", existing_type=sa.INTEGER(), nullable=True
    )
    op.drop_column("workout_exercises", "distance_unit")
    op.drop_column("workout_exercises", "weight_unit")
    op.drop_column("workout_exercises", "notes")
    op.drop_column("workout_exercises", "actual_weight")
    op.drop_column("workout_exercises", "actual_reps")
    op.drop_column("workout_exercises", "rest_time")
    op.drop_column("workout_exercises", "incline")
    op.drop_column("workout_exercises", "speed")
    op.drop_column("workout_exercises", "distance")
    op.drop_column("workout_exercises", "duration")
    op.drop_column("workout_exercises", "weight")
    op.drop_column("workout_exercises", "order")
    op.drop_index(op.f("ix_users_username"), table_name="users")
    op.drop_index(op.f("ix_users_id"), table_name="users")
    op.drop_index(op.f("ix_users_email"), table_name="users")
    op.create_unique_constraint("users_username_key", "users", ["username"])
    op.create_unique_constraint("users_email_key", "users", ["email"])
    op.create_index("idx_users_username", "users", ["username"], unique=False)
    op.create_index("idx_users_email", "users", ["email"], unique=False)
    op.alter_column(
        "users",
        "weight_unit",
        existing_type=sa.Enum("KG", "LBS", name="weightunit"),
        type_=sa.VARCHAR(length=20),
        existing_nullable=True,
        existing_server_default=sa.text("'KG'::character varying"),
    )
    op.alter_column(
        "users",
        "height_unit",
        existing_type=sa.Enum("CM", "INCHES", "FEET_INCHES", name="heightunit"),
        type_=sa.VARCHAR(length=20),
        existing_nullable=True,
        existing_server_default=sa.text("'CM'::character varying"),
    )
    op.alter_column(
        "users",
        "unit_system",
        existing_type=sa.Enum("METRIC", "IMPERIAL", name="unitsystem"),
        type_=sa.VARCHAR(length=20),
        existing_nullable=True,
        existing_server_default=sa.text("'METRIC'::character varying"),
    )
    op.alter_column(
        "users",
        "experience_level",
        existing_type=sa.Enum(
            "BEGINNER", "INTERMEDIATE", "ADVANCED", "EXPERT", name="experiencelevel"
        ),
        type_=sa.VARCHAR(length=20),
        existing_nullable=True,
    )
    op.alter_column(
        "users",
        "fitness_goal",
        existing_type=sa.Enum(
            "WEIGHT_LOSS",
            "MUSCLE_GAIN",
            "STRENGTH",
            "ENDURANCE",
            "GENERAL_FITNESS",
            "ATHLETIC_PERFORMANCE",
            name="fitnessgoal",
        ),
        type_=sa.VARCHAR(length=50),
        existing_nullable=True,
    )
    op.alter_column(
        "users",
        "weight",
        existing_type=sa.Float(),
        type_=sa.NUMERIC(precision=5, scale=2),
        existing_nullable=True,
    )
    op.alter_column(
        "users",
        "height",
        existing_type=sa.Float(),
        type_=sa.NUMERIC(precision=5, scale=2),
        existing_nullable=True,
    )
    op.add_column(
        "user_goals",
        sa.Column(
            "status",
            sa.VARCHAR(length=20),
            server_default=sa.text("'active'::character varying"),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "user_goals",
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.drop_constraint(None, "user_goals", type_="foreignkey")
    op.create_foreign_key(
        "user_goals_user_id_fkey",
        "user_goals",
        "users",
        ["user_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.drop_index(op.f("ix_user_goals_id"), table_name="user_goals")
    op.create_index("idx_user_goals_user_id", "user_goals", ["user_id"], unique=False)
    op.alter_column(
        "user_goals",
        "target_date",
        existing_type=sa.DateTime(),
        type_=sa.DATE(),
        existing_nullable=True,
    )
    op.alter_column(
        "user_goals",
        "current_value",
        existing_type=sa.Float(),
        type_=sa.NUMERIC(precision=10, scale=2),
        existing_nullable=True,
        existing_server_default=sa.text("0"),
    )
    op.alter_column(
        "user_goals",
        "target_value",
        existing_type=sa.Float(),
        type_=sa.NUMERIC(precision=10, scale=2),
        nullable=True,
    )
    op.alter_column("user_goals", "user_id", existing_type=sa.INTEGER(), nullable=True)
    op.drop_column("user_goals", "achieved_at")
    op.drop_column("user_goals", "is_achieved")
    op.add_column(
        "exercises",
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "exercises",
        sa.Column(
            "image_url", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "exercises",
        sa.Column(
            "muscle_group", sa.VARCHAR(length=50), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "exercises",
        sa.Column(
            "difficulty_level",
            sa.VARCHAR(length=20),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.drop_index(op.f("ix_exercises_primary_muscle"), table_name="exercises")
    op.drop_index(op.f("ix_exercises_name"), table_name="exercises")
    op.drop_index(op.f("ix_exercises_id"), table_name="exercises")
    op.drop_index(op.f("ix_exercises_equipment"), table_name="exercises")
    op.alter_column(
        "exercises",
        "equipment",
        existing_type=sa.Enum(
            "NONE",
            "BARBELL",
            "DUMBBELL",
            "KETTLEBELL",
            "MACHINE",
            "CABLE",
            "BANDS",
            "BODYWEIGHT",
            "CARDIO_MACHINE",
            "OTHER",
            name="equipment",
        ),
        type_=sa.VARCHAR(length=50),
        nullable=True,
    )
    op.drop_column("exercises", "mets")
    op.drop_column("exercises", "is_time_based")
    op.drop_column("exercises", "is_distance_based")
    op.drop_column("exercises", "video_url")
    op.drop_column("exercises", "tips")
    op.drop_column("exercises", "difficulty")
    op.drop_column("exercises", "exercise_type")
    op.drop_column("exercises", "secondary_muscles")
    op.drop_column("exercises", "primary_muscle")
    op.create_table(
        "workout_shares",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("workout_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "is_public",
            sa.BOOLEAN(),
            server_default=sa.text("false"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name="workout_shares_user_id_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["workout_id"],
            ["workouts.id"],
            name="workout_shares_workout_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="workout_shares_pkey"),
    )
    op.create_table(
        "user_followers",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("follower_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("following_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["follower_id"],
            ["users.id"],
            name="user_followers_follower_id_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["following_id"],
            ["users.id"],
            name="user_followers_following_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="user_followers_pkey"),
        sa.UniqueConstraint(
            "follower_id",
            "following_id",
            name="user_followers_follower_id_following_id_key",
        ),
    )
    op.create_index(
        "idx_user_followers_following_id",
        "user_followers",
        ["following_id"],
        unique=False,
    )
    op.create_index(
        "idx_user_followers_follower_id",
        "user_followers",
        ["follower_id"],
        unique=False,
    )
    op.create_table(
        "workout_logs",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('workout_logs_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("workout_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "started_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "completed_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column("notes", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name="workout_logs_user_id_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["workout_id"],
            ["workouts.id"],
            name="workout_logs_workout_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="workout_logs_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_index(
        "idx_workout_logs_user_id", "workout_logs", ["user_id"], unique=False
    )
    op.create_table(
        "exercise_logs",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("workout_log_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("exercise_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("sets", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("reps", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "weight_kg",
            sa.NUMERIC(precision=5, scale=2),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("duration_seconds", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("rest_seconds", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("notes", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["exercise_id"],
            ["exercises.id"],
            name="exercise_logs_exercise_id_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["workout_log_id"],
            ["workout_logs.id"],
            name="exercise_logs_workout_log_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="exercise_logs_pkey"),
    )
    op.create_index(
        "idx_exercise_logs_workout_log_id",
        "exercise_logs",
        ["workout_log_id"],
        unique=False,
    )
    op.drop_index(
        op.f("ix_community_memberships_id"), table_name="community_memberships"
    )
    op.drop_table("community_memberships")
    op.drop_index(op.f("ix_user_stats_id"), table_name="user_stats")
    op.drop_index(op.f("ix_user_stats_date"), table_name="user_stats")
    op.drop_table("user_stats")
    op.drop_index(op.f("ix_user_reports_id"), table_name="user_reports")
    op.drop_table("user_reports")
    op.drop_index(op.f("ix_user_blocks_id"), table_name="user_blocks")
    op.drop_table("user_blocks")
    op.drop_index(
        op.f("ix_recommendation_feedback_id"), table_name="recommendation_feedback"
    )
    op.drop_table("recommendation_feedback")
    op.drop_index(op.f("ix_privacy_settings_id"), table_name="privacy_settings")
    op.drop_table("privacy_settings")
    op.drop_index(op.f("ix_friendships_id"), table_name="friendships")
    op.drop_table("friendships")
    op.drop_index(op.f("ix_friend_invitations_id"), table_name="friend_invitations")
    op.drop_table("friend_invitations")
    op.drop_index(op.f("ix_community_groups_id"), table_name="community_groups")
    op.drop_table("community_groups")
    op.drop_index(op.f("ix_challenges_id"), table_name="challenges")
    op.drop_table("challenges")
    op.drop_index(
        op.f("ix_accountability_checkins_id"), table_name="accountability_checkins"
    )
    op.drop_table("accountability_checkins")
    # ### end Alembic commands ###
